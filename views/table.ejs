<!DOCTYPE html>
<html lang="en">

<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <link rel="preconnect" href="https://fonts.googleapis.com">
   <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
   <link
      href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&display=swap"
      rel="stylesheet">
   <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
      integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
   <link href="./style.css" rel="stylesheet">
   <title>Epixlog Report</title>
</head>

<body>
   <div class="container-fluid">
      <div class="row mb-3">
         <div class="col-3">
            <button class="btn btn-sm btn-light border" id="back"> Back</button>
         </div>
         <div class="col-6 align-content-center">
            <div class="text-center mt-1">
               <h6><span id="db"></span></h6>
               <h6>Month : <span id="month"></span> & Year : <span id="year"></span></h6>
            </div>
         </div>
         <div class="col-3 text-end">
            <button class="btn btn-sm btn-success ms-1" id="exportCSV">CSV</button>

            <button class="btn btn-sm btn-primary  ms-1" id="export-btn">Excel</button>
         </div>
      </div>
      <div class="row">

         <div class="col-12">

            <table class="table table-sm table-bordered table-hover">
               <thead class="sticky-top ">
                  <tr>
                     <th rowspan="2">No</th>
                     <th colspan="3" class="text-center">
                        <!-- <div class="hideZero">
                           <input type="checkbox" id="showAll" onchange="onShowAll()"> 
                           <label for="showAll">Show All</label>
                        </div> -->
                        <div>
                           <!-- <input type="text" class="form-control form-control-sm search"
                              placeholder="Search by Material_ID" onchange="onSearch();"> -->
                           MATERIAL
                        </div>



                     </th>
                     <th colspan="2" class="text-center">UNIT</th>
                     <th colspan="2" class="text-center">Beginning Stock </th>
                     <th colspan="2" class="text-center">In Stock/GRN</th>
                     <th colspan="2" class="text-center">Ending Stock</th>
                     
                     <th colspan="2" class="text-center">Transaction Out</th>
                     <th colspan="2" class="text-center">COGS</th>

                  </tr>
                  <tr>

                     <th>Material_ID</th>
                     <th>Material_Desc1</th>
                     <th>UOM</th>

                     <th class="text-end">Price</th>
                     <th>Base</th>

                     <th class="text-end">Stock </th>
                     <th class="text-end">Pricing </th>

                     <th class="text-end">Stock</th>
                     <th class="text-end">Pricing</th>

                     <th class="text-end">Stock </th>
                     <th class="text-end">Pricing </th>
 
                     <th class="text-end">Qty </th>
                     <th class="text-end">Price </th>

                     <th class="text-end">Stock </th>
                     <th class="text-end">Pricing </th>


                  </tr>
               </thead>
               <tbody id="data">
               </tbody>

               <tfoot id="dataTotal" class="sticky-bottom">
               </tfoot>
            </table>
            <div class="p-5 text-center" id="loading">
               <div>
                  <img src="./Animation - 1729584499834.gif" width="100">
               </div>

               <div> Loading...</div>
            </div>
         </div>
      </div>
   </div>
   <script src="./env.js"></script>


   <script src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
   <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
      crossorigin="anonymous"></script>

   <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
   <script>
      var urlParams = new URLSearchParams(window.location.search);

      const getParam = {
         month: urlParams.get('month'),
         year: urlParams.get('year'),
         db: urlParams.get('db'),
      }

      $('#month').html(getParam['month']);
      $('#year').html(getParam['year']);

      const formatter = new Intl.NumberFormat('en-US', {
         style: 'currency',
         currency: 'IDR',
      });
      var digit = 2;
      let items = [];
      let exlsJson = [];
      let exportFinal = {};
      function currency(val) {
         return val == null ? 0 : formatter.format(val.toFixed(digit)).replace("IDR", "");
      }

      $(document).ready(function () {
         $('#back').on("click", function () {
            history.back();
         });
         $('#exportCSV').on("click", function () {
            console.log("exportCSV");
            downloadCSV(items);

         });

         $("#loading").show();
         $(".hideZero").hide();
         $.ajax({
            type: 'GET',
            url: base_api + 'report/result',
            //url: './result.json',

            data: getParam,
            dataType: 'json',
            success: function (data) {

               $("#loading").hide();
               $(".hideZero").show();

               $('#month').html(data['get']['month']);
               $('#year').html(data['get']['year']);
               $('#db').html(urlParams.get('db'));

               console.log(data);
               let i = 1;
               items = data['finalData'];
               tbodyData();
               const total = data['total'];

               exportFinal = {
                  no: '',
                  Material_ID: 'TOTAL :',
                  Material_Desc1: '',
                  UOM_Desc: '',
                  UnitPrice: '',
                  BaseUnitDesc: '',

                  begin_stock: total['begin']['stock'],
                  begin_pricing: total['begin']['pricing'],

                  in_stock: total['in']['stock'],
                  in_pricing: total['in']['pricing'],

                  end_stock: total['end']['stock'],
                  end_pricing: total['end']['pricing'],

                  cogs_stock: total['cogs']['stock'],
                  cogs_pricing: total['cogs']['pricing'],

                  transOut_stock: total['transOut']['stock'],
                  transOut_pricing: total['transOut']['pricing'],
               }
               exlsJson.push(exportFinal);


               $('#dataTotal').append(`
                  <tr>
                        <td></td>
                        <td colspan="5" class='bgn-1'>Total :</td>  
                        <td class="text-end bgn-1">${currency(total['begin']['stock'])} </td>
                        <td class="text-end bgn-1">${currency(total['begin']['pricing'])} </td>
                        
                        <td class="text-end bgn-2 ">${currency(total['in']['stock'])} </td>
                        <td class="text-end bgn-2 ">${currency(total['in']['pricing'])} </td>
                        
                        <td class="text-end bgn-3 ">${currency(total['end']['stock'])}</td>
                        <td class="text-end bgn-3 ">${currency(total['end']['pricing'])}</td>
                        
                        <td class="text-end">${formatNumber(total['transOut']['stock'])}</td> 
                        <td class="text-end">${currency(total['transOut']['pricing'])}</td> 

                        <td class="text-end">${currency(total['cogs']['stock'])}</td> 
                        <td class="text-end">${currency(total['cogs']['pricing'])}</td> 

                     
                  <tr>  
               `);
            },
            error: function (err) {
               console.log(err);
               $('#loading').html("<strong class='text-danger'>ERROR DB / DB NOT FOUND</strong>");
            }
         });

      });

      function tbodyData() {
         let i = 1;


         $.each(items, function (index, el) {

            // if (el['cogs']['stock'].toFixed(0) != 0 || $('#showAll').is(":checked") == true) {

            let temp = {
               no: i,
               Material_ID: el['Material_ID'],
               Material_Desc1: el['Material_Desc1'],
               UOM_Desc: el['UOM_Desc'],
               UnitPrice: el['UnitPrice'],
               BaseUnitDesc: el['BaseUnitDesc'],

               begin_stock: el['begin']['stock'],
               begin_pricing: el['begin']['pricing'],

               in_stock: el['in']['stock'],
               in_pricing: el['in']['pricing'],

               end_stock: el['end']['stock'],
               end_pricing: el['end']['pricing'],

               cogs_stock: el['cogs']['stock'],
               cogs_pricing: el['cogs']['pricing'],

               transOut_stock: el['transOut']['stock'],
               transOut_pricing: el['transOut']['pricing'],
               
            }


            exlsJson.push(temp);

            $('#data').append(`
                        <tr class="${el['cogs']['stock'].toFixed(0) == 0 ? 'isZero' : ''}">
                           <td>${i++}</td>
                           <td>${el['Material_ID']}</td>
                           <td>${el['Material_Desc1']}</td> 
                           <td>${el['UOM_Desc']}</td> 
                           
                           <td class="text-end">${currency(el['UnitPrice'])} </td>
                           <td>${el['BaseUnitDesc']} </td>
                           
                           <td class="text-end bgn-1">${currency(el['begin']['stock'])} </td>
                           <td class="text-end bgn-1">${currency(el['begin']['pricing'])} </td>
                           
                           <td class="text-end bgn-2 ">${currency(el['in']['stock'])} </td>
                           <td class="text-end bgn-2 ">${currency(el['in']['pricing'])} </td>
                           
                           <td class="text-end bgn-3 ">${currency(el['end']['stock'])}</td>
                           <td class="text-end bgn-3 ">${currency(el['end']['pricing'])}</td>
                           
                           <td class="text-end bgn-1">${formatNumber(el['transOut']['stock'])}</td> 
                           <td class="text-end bgn-1">${currency(el['transOut']['pricing'])}</td>  
                           

                           <td class="text-end">${currency(el['cogs']['stock'])}</td> 
                           <td class="text-end">${currency(el['cogs']['pricing'])}</td>  

                        
                        <tr> 
                     `);




            // }

         });
      }
      function formatNumber(number) {
         // Potong hingga 3 digit desimal
         const formattedNumber = number.toFixed(3);

         // Tambahkan tanda koma sebagai pemisah ribuan
         return formattedNumber.replace(/\B(?=(\d{3})+(?!\d))/g, ",");
         }

      function onShowAll() {
         console.log($('#showAll').is(":checked"));
         tbodyData();
      }

      function onSearch() {
         $('#data').html('');
         tbodyData();
      }

      function convertJSONToCSV(jsonData) {
         // Parse JSON jika perlu
         var data = typeof jsonData !== 'object' ? JSON.parse(jsonData) : jsonData;

         // Header kolom
         var csv = 'Material_ID,Material_Desc1,Document_Type,PackUnit,Qty_In,DateCreated,Convertion,UnitPrice,Price,begin.stock,begin.pricing,in.stock,in.pricing,end.stock,end.pricing,cogs.stock,cogs.pricing\n';
         let delimited = ',';
         // Looping setiap objek dalam data JSON
         data.forEach(function (row) {
            csv += row.Material_ID.replace(',', '') + delimited +
               (row.Material_Desc1 || '').replace(',', '') + delimited +
               row.Document_Type.replace(',', '') + delimited +
               row.PackUnit.replace(',', '') + delimited +
               row.Qty_In + delimited +
               row.DateCreated + delimited +
               row.Convertion + delimited +
               row.UnitPrice + delimited +
               row.Price + delimited +

               row.begin.stock + delimited +
               row.begin.pricing + delimited +
               row.in.stock + delimited +
               row.in.pricing + delimited +
               row.end.stock + delimited +
               row.end.pricing + delimited +

               row.cogs.stock + delimited +
               row.cogs.pricing + delimited +

               row.transOut.stock + delimited +
               row.transOut.pricing + 
               '\n';
         });
         csv += '' + delimited +
            'TOTAL' + delimited +
            '' + delimited +
            '' + delimited +
            '' + delimited +
            '' + delimited +
            '' + delimited +
            '' + delimited +
            '' + delimited +

            exportFinal.begin_stock + delimited +
            exportFinal.begin_pricing + delimited +

            exportFinal.in_stock + delimited +
            exportFinal.in_pricing + delimited +

            exportFinal.end_stock + delimited +
            exportFinal.end_pricing + delimited +

            exportFinal.transOut_stock + delimited +
            exportFinal.transOut_pricing + 
            
            '\n';
         return csv;
      }

      function downloadCSV(jsonData) {
         let filename = urlParams.get('year') + '_' + urlParams.get('month') + '_' + urlParams.get('db') + ".csv";

         var csv = convertJSONToCSV(jsonData);

         var blob = new Blob([csv], { type: 'text/csv' });
         var url = window.URL.createObjectURL(blob);
         var a = document.createElement('a');
         a.setAttribute('hidden', '');
         a.setAttribute('href', url);
         a.setAttribute('download', filename);
         document.body.appendChild(a);
         a.click();
         document.body.removeChild(a);
      }


      function exportJsonToExcel() {
         // Create a new workbook
         const workbook = XLSX.utils.book_new();

         // Convert JSON data to a worksheet
         const worksheet = XLSX.utils.json_to_sheet(exlsJson);

         // Append the worksheet to the workbook
         XLSX.utils.book_append_sheet(workbook, worksheet, "Sheet1");

         let nameFile = urlParams.get('year') + '_' + urlParams.get('month') + '_' + urlParams.get('db') + ".xlsx";

         // Export the workbook as an Excel file
         XLSX.writeFile(workbook, nameFile);
      }

      // Event listener for the export button
      document.getElementById("export-btn").addEventListener("click", exportJsonToExcel);
   </script>
</body>

</html>